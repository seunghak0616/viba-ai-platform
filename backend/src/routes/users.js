/**\n * User Routes\n * 사용자 관리 API 엔드포인트\n */\nimport express from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\nimport { body, validationResult } from 'express-validator';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n/**\n * GET /api/users/me\n * 현재 사용자 정보 조회\n */\nrouter.get('/me', async (req, res) => {\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id: req.user.id },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        company: true,\n        role: true,\n        isActive: true,\n        emailVerified: true,\n        preferences: true,\n        createdAt: true,\n        updatedAt: true\n      }\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: '사용자를 찾을 수 없습니다.'\n      });\n    }\n\n    // JSON 문자열인 preferences를 객체로 파싱\n    if (user.preferences) {\n      try {\n        user.preferences = JSON.parse(user.preferences);\n      } catch (e) {\n        user.preferences = null;\n      }\n    }\n\n    res.json({\n      success: true,\n      data: { user }\n    });\n  } catch (error) {\n    console.error('Get user profile error:', error);\n    res.status(500).json({\n      success: false,\n      message: '사용자 정보 조회 중 오류가 발생했습니다.'\n    });\n  }\n});\n\n/**\n * PUT /api/users/me\n * 현재 사용자 정보 수정\n */\nrouter.put('/me', [\n  body('name').optional().isLength({ min: 1, max: 100 }).withMessage('이름은 1-100자 사이여야 합니다.'),\n  body('company').optional().isLength({ max: 100 }).withMessage('회사명은 100자 이하여야 합니다.'),\n  body('preferences').optional().isObject().withMessage('설정은 객체 형태여야 합니다.')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        message: '입력 데이터가 올바르지 않습니다.',\n        errors: errors.array()\n      });\n    }\n\n    const { name, company, preferences } = req.body;\n    const updateData = {};\n\n    if (name !== undefined) updateData.name = name;\n    if (company !== undefined) updateData.company = company;\n    if (preferences !== undefined) {\n      updateData.preferences = JSON.stringify(preferences);\n    }\n\n    const updatedUser = await prisma.user.update({\n      where: { id: req.user.id },\n      data: updateData,\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        company: true,\n        role: true,\n        preferences: true,\n        updatedAt: true\n      }\n    });\n\n    // JSON 문자열인 preferences를 객체로 파싱\n    if (updatedUser.preferences) {\n      try {\n        updatedUser.preferences = JSON.parse(updatedUser.preferences);\n      } catch (e) {\n        updatedUser.preferences = null;\n      }\n    }\n\n    res.json({\n      success: true,\n      message: '사용자 정보가 성공적으로 업데이트되었습니다.',\n      data: { user: updatedUser }\n    });\n  } catch (error) {\n    console.error('Update user profile error:', error);\n    res.status(500).json({\n      success: false,\n      message: '사용자 정보 수정 중 오류가 발생했습니다.'\n    });\n  }\n});\n\n/**\n * PUT /api/users/password\n * 비밀번호 변경\n */\nrouter.put('/password', [\n  body('currentPassword').notEmpty().withMessage('현재 비밀번호를 입력해주세요.'),\n  body('newPassword').isLength({ min: 6 }).withMessage('새 비밀번호는 6자 이상이어야 합니다.')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        message: '입력 데이터가 올바르지 않습니다.',\n        errors: errors.array()\n      });\n    }\n\n    const { currentPassword, newPassword } = req.body;\n\n    // 현재 사용자 조회\n    const user = await prisma.user.findUnique({\n      where: { id: req.user.id }\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: '사용자를 찾을 수 없습니다.'\n      });\n    }\n\n    // 현재 비밀번호 확인\n    const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\n    if (!isCurrentPasswordValid) {\n      return res.status(400).json({\n        success: false,\n        message: '현재 비밀번호가 올바르지 않습니다.'\n      });\n    }\n\n    // 새 비밀번호 해시화\n    const hashedNewPassword = await bcrypt.hash(newPassword, 12);\n\n    // 비밀번호 업데이트\n    await prisma.user.update({\n      where: { id: req.user.id },\n      data: {\n        password: hashedNewPassword,\n        passwordChangedAt: new Date()\n      }\n    });\n\n    res.json({\n      success: true,\n      message: '비밀번호가 성공적으로 변경되었습니다.'\n    });\n  } catch (error) {\n    console.error('Change password error:', error);\n    res.status(500).json({\n      success: false,\n      message: '비밀번호 변경 중 오류가 발생했습니다.'\n    });\n  }\n});\n\nexport default router;\n"