# 프로덕션용 React 프론트엔드 Dockerfile (Multi-stage build)
FROM node:18-alpine AS builder

# 빌드 인수
ARG REACT_APP_API_URL
ARG REACT_APP_AI_API_URL

# 환경 변수 설정
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_AI_API_URL=$REACT_APP_AI_API_URL
ENV NODE_ENV=production

# 작업 디렉토리 설정
WORKDIR /app

# 패키지 파일 복사 및 의존성 설치
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# 소스 코드 복사
COPY . .

# 프로덕션 빌드
RUN npm run build

# 프로덕션 스테이지 - Nginx
FROM nginx:alpine AS production

# 보안을 위한 비root 사용자 설정
RUN addgroup -g 1001 -S nginx && \
    adduser -S nginx -u 1001 -G nginx

# Nginx 설정 파일 복사
COPY nginx/default.conf /etc/nginx/conf.d/default.conf

# 빌드된 앱 복사
COPY --from=builder /app/dist /usr/share/nginx/html

# 권한 설정
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# 비root 사용자로 전환
USER nginx

# 포트 노출
EXPOSE 80

# 헬스체크
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:80 || exit 1

# Nginx 실행
CMD ["nginx", "-g", "daemon off;"]