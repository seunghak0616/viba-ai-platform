{
  "name": "bim-vibe-coding-platform",
  "version": "2.0.0",
  "description": "건축이론과 BIM 기술을 융합한 차세대 AI 기반 건축설계 플랫폼",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "dev": "concurrently \"npm run dev:frontend\" \"npm run dev:backend\" \"npm run dev:nlp\"",
    "dev:all": "concurrently \"npm run dev:frontend\" \"npm run dev:backend\" \"npm run dev:nlp\" \"npm run dev:viba\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "dev:nlp": "cd nlp-engine && python -m uvicorn main:app --reload --port 8000",
    "dev:viba": "cd nlp-engine && python -m viba.agents.orchestrator --dev",
    "build": "npm run build:frontend && npm run build:backend",
    "build:production": "npm run build && npm run build:ai-models",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    "build:ai-models": "cd nlp-engine && python scripts/build_models.py",
    "test": "npm run test:unit && npm run test:integration",
    "test:ai": "npm run test:unit:ai && npm run test:integration:ai",
    "test:unit": "npm run test:unit:frontend && npm run test:unit:backend",
    "test:unit:frontend": "cd frontend && npm run test",
    "test:unit:backend": "cd backend && npm run test",
    "test:unit:ai": "cd nlp-engine && python -m pytest tests/unit/ -v",
    "test:unit:nlp": "cd nlp-engine && python -m pytest tests/unit/nlp_engine_tests.py -v",
    "test:unit:design-theory": "cd nlp-engine && python -m pytest tests/unit/theory_application_tests.py -v",
    "test:unit:bim-generation": "cd nlp-engine && python -m pytest tests/unit/bim_generation_tests.py -v",
    "test:unit:performance-analysis": "cd nlp-engine && python -m pytest tests/unit/performance_analysis_tests.py -v",
    "test:unit:theory-application": "cd nlp-engine && python -m pytest tests/unit/theory_application_tests.py -v",
    "test:integration": "npm run test:integration:api && npm run test:integration:ai",
    "test:integration:api": "cd backend && npm run test:integration",
    "test:integration:ai": "cd nlp-engine && python -m pytest tests/integration/ -v",
    "test:integration:multi-agent": "cd nlp-engine && python -m pytest tests/integration/multi_agent_integration_tests.py -v",
    "test:integration:mcp": "cd nlp-engine && python -m pytest tests/mcp/mcp_integration_tests.py -v",
    "test:e2e": "cd frontend && npx playwright test tests/e2e/",
    "test:performance": "k6 run tests/performance/api_load_test.js",
    "test:smoke:staging": "cd frontend && npx playwright test tests/smoke/ --config=playwright.staging.config.js",
    "setup:ai-models": "cd nlp-engine && python scripts/download_models.py",
    "setup:dev": "npm install && cd frontend && npm install && cd ../backend && npm install && cd ../nlp-engine && pip install -r requirements.txt",
    "db:setup": "cd backend && npx prisma migrate dev && npx prisma db seed",
    "db:reset:test": "cd backend && DATABASE_URL=$DATABASE_URL npx prisma migrate reset --force",
    "data:seed:test": "cd backend && NODE_ENV=test npx prisma db seed",
    "data:load-theories": "cd nlp-engine && python scripts/load_architectural_theories.py",
    "mcp:setup": "cd nlp-engine && python scripts/setup_mcp_connections.py",
    "start:test-env": "concurrently \"npm run start:frontend:test\" \"npm run start:backend:test\" \"npm run start:nlp:test\"",
    "start:frontend:test": "cd frontend && npm run preview -- --port 3000",
    "start:backend:test": "cd backend && NODE_ENV=test npm start",
    "start:nlp:test": "cd nlp-engine && TEST_MODE=true python -m uvicorn main:app --port 8000",
    "lint": "npm run lint:frontend && npm run lint:backend && npm run lint:python",
    "lint:check": "npm run lint:frontend:check && npm run lint:backend:check && npm run lint:python:check",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:frontend:check": "cd frontend && npm run lint:check",
    "lint:backend": "cd backend && npm run lint",
    "lint:backend:check": "cd backend && npm run lint:check",
    "lint:python": "cd nlp-engine && black . && isort .",
    "lint:python:check": "cd nlp-engine && black --check . && isort --check-only .",
    "format": "npm run format:frontend && npm run format:backend && npm run format:python",
    "format:check": "npm run format:frontend:check && npm run format:backend:check && npm run format:python:check",
    "format:frontend": "cd frontend && npm run format",
    "format:frontend:check": "cd frontend && npm run format:check",
    "format:backend": "cd backend && npm run format",
    "format:backend:check": "cd backend && npm run format:check",
    "format:python": "cd nlp-engine && black .",
    "format:python:check": "cd nlp-engine && black --check .",
    "type-check": "npm run type-check:frontend && npm run type-check:backend && npm run type-check:python",
    "type-check:frontend": "cd frontend && npm run type-check",
    "type-check:backend": "cd backend && npm run type-check",
    "type-check:python": "cd nlp-engine && mypy src/"
  },
  "keywords": [
    "BIM",
    "AI",
    "건축설계",
    "건축이론",
    "자동화",
    "3D모델링",
    "IFC",
    "성능분석",
    "에너지효율",
    "React",
    "TypeScript",
    "Python",
    "TensorFlow",
    "NLP"
  ],
  "author": "VIBA AI Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/bim-vibe-coding/platform.git"
  },
  "bugs": {
    "url": "https://github.com/bim-vibe-coding/platform/issues"
  },
  "homepage": "https://bim-vibe-coding.com",
  "devDependencies": {
    "@playwright/test": "^1.40.0",
    "@types/jest": "^29.5.8",
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "eslint": "^8.55.0",
    "jest": "^29.7.0",
    "prettier": "^3.1.0",
    "supertest": "^6.3.3",
    "typescript": "^5.3.0"
  },
  "dependencies": {
    "dotenv": "^16.3.1",
    "node-fetch": "^3.3.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0",
    "python": ">=3.11.0"
  },
  "workspaces": [
    "frontend",
    "backend"
  ]
}
